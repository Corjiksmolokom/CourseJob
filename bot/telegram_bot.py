"""
Telegram –±–æ—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ Rukami
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import logging
from typing import Optional, Dict, Any
import os
from datetime import datetime
import hashlib
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTRATION_NAME, REGISTRATION_EMAIL, REGISTRATION_PHONE, REGISTRATION_PASSWORD = range(4)
LOGIN_EMAIL, LOGIN_PASSWORD = range(4, 6)


class RukamiBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.db_pool = None
        self.application = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ config.py
        self.db_user = os.getenv('DB_USER', 'postgres')
        self.db_password = os.getenv('DB_PASSWORD', 'postgres')
        self.db_host = os.getenv('DB_HOST', 'localhost')
        self.db_port = os.getenv('DB_PORT', '5432')
        self.db_name = os.getenv('DB_NAME', 'rukami_db')

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_sessions: Dict[int, Dict[str, Any]] = {}

        self.notification_task = None
        self.last_product_check = None

    @property
    def database_url(self) -> str:
        """URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return f"postgresql://{self.db_user}:{self.db_password}@{self.db_host}:{self.db_port}/{self.db_name}"

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            self.db_pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=5,
                command_timeout=60
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ telegram_id –≤ —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await self.add_telegram_id_field()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    async def add_telegram_id_field(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è telegram_id –∏ notifications_enabled –≤ —Ç–∞–±–ª–∏—Ü—É users"""
        try:
            async with self.db_pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ telegram_id
                result = await conn.fetchval("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'telegram_id'
                """)

                if not result:
                    await conn.execute("""
                        ALTER TABLE users 
                        ADD COLUMN telegram_id BIGINT UNIQUE
                    """)
                    logger.info("‚úÖ –ü–æ–ª–µ telegram_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É users")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ notifications_enabled
                result = await conn.fetchval("""
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_name = 'users' AND column_name = 'notifications_enabled'
                """)

                if not result:
                    await conn.execute("""
                        ALTER TABLE users 
                        ADD COLUMN notifications_enabled BOOLEAN DEFAULT true
                    """)
                    logger.info("‚úÖ –ü–æ–ª–µ notifications_enabled –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É users")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users: {e}")

    async def close_db(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if self.db_pool:
            await self.db_pool.close()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()

    def validate_email(self, email: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None

    def validate_phone(self, phone: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        return re.match(pattern, phone.replace(' ', '').replace('-', '')) is not None

    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE telegram_id = $1",
                telegram_id
            )

    async def get_user_by_email(self, email: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE email = $1",
                email
            )

    async def create_user(self, name: str, email: str, phone: str, password: str, telegram_id: int) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO users (name, email, phone, password_hash, telegram_id)
                    VALUES ($1, $2, $3, $4, $5)
                """, name, email, phone, self.hash_password(password), telegram_id)
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def link_telegram_to_user(self, email: str, password: str, telegram_id: int) -> bool:
        """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.db_pool.acquire() as conn:
                user = await conn.fetchrow(
                    "SELECT * FROM users WHERE email = $1 AND password_hash = $2",
                    email, self.hash_password(password)
                )

                if user:
                    await conn.execute(
                        "UPDATE users SET telegram_id = $1 WHERE id = $2",
                        telegram_id, user['id']
                    )
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram: {e}")
            return False

    async def get_categories(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetch(
                "SELECT * FROM categories WHERE is_active = true ORDER BY sort_order, name"
            )

    async def get_products_by_category(self, category_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetch("""
                SELECT p.*, c.name as category_name, u.name as seller_name 
                FROM products p 
                JOIN categories c ON p.category_id = c.id 
                JOIN users u ON p.user_id = u.id 
                WHERE p.category_id = $1 AND p.in_stock = true 
                ORDER BY p.created_at DESC 
                LIMIT $2
            """, category_id, limit)

    async def get_product_by_id(self, product_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetchrow("""
                SELECT p.*, c.name as category_name, u.name as seller_name, u.phone as seller_phone, u.email as seller_email
                FROM products p 
                JOIN categories c ON p.category_id = c.id 
                JOIN users u ON p.user_id = u.id 
                WHERE p.id = $1
            """, product_id)

    def is_user_authenticated(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return telegram_id in self.user_sessions and self.user_sessions[telegram_id].get('authenticated', False)

    async def require_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–æ–π—Ç–∏"""
        telegram_id = update.effective_user.id

        if not self.is_user_authenticated(telegram_id):
            text = "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
            keyboard = [
                [InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login")],
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
            return False
        return True

    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        telegram_id = user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        db_user = await self.get_user_by_telegram_id(telegram_id)
        if db_user:
            self.user_sessions[telegram_id] = {
                'authenticated': True,
                'user_id': db_user['id'],
                'user_name': db_user['name']
            }

        welcome_text = f"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rukami, {user.first_name}!

Rukami - —ç—Ç–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã. 
–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ö–µ—Ä–∞–º–∏–∫—É –∏ –ø–æ—Å—É–¥—É
‚Ä¢ –£–∫—Ä–∞—à–µ–Ω–∏—è –∏ –±–∏–∂—É—Ç–µ—Ä–∏—é  
‚Ä¢ –¢–µ–∫—Å—Ç–∏–ª—å –∏ –≤—è–∑–∞–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
‚Ä¢ –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –º—ã–ª–æ –∏ —Å–≤–µ—á–∏
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")]
        ]

        if self.is_user_authenticated(telegram_id):
            keyboard.extend([
                [InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
        else:
            keyboard.extend([
                [InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login")],
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
            ])

        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    async def start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        text = "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        await query.edit_message_text(text, parse_mode='Markdown')
        return REGISTRATION_NAME

    async def registration_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        name = update.message.text.strip()

        if len(name) < 2:
            await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return REGISTRATION_NAME

        context.user_data['registration_name'] = name
        await update.message.reply_text("üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        return REGISTRATION_EMAIL

    async def registration_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        email = update.message.text.strip().lower()

        if not self.validate_email(email):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return REGISTRATION_EMAIL

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email
        existing_user = await self.get_user_by_email(email)
        if existing_user:
            await update.message.reply_text("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:")
            return REGISTRATION_EMAIL

        context.user_data['registration_email'] = email
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return REGISTRATION_PHONE

    async def registration_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        phone = update.message.text.strip()

        if not self.validate_phone(phone):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 900 123 45 67):")
            return REGISTRATION_PHONE

        context.user_data['registration_phone'] = phone
        await update.message.reply_text("üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
        return REGISTRATION_PASSWORD

    async def registration_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        password = update.message.text.strip()

        if len(password) < 6:
            await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return REGISTRATION_PASSWORD

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await self.create_user(
            context.user_data['registration_name'],
            context.user_data['registration_email'],
            context.user_data['registration_phone'],
            password,
            update.effective_user.id
        )

        if success:
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_sessions[update.effective_user.id] = {
                'authenticated': True,
                'user_name': context.user_data['registration_name']
            }

            await update.message.reply_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rukami! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async def start_login(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        text = "üîë *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
        await query.edit_message_text(text, parse_mode='Markdown')
        return LOGIN_EMAIL

    async def login_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        email = update.message.text.strip().lower()

        if not self.validate_email(email):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return LOGIN_EMAIL

        context.user_data['login_email'] = email
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        return LOGIN_PASSWORD

    async def login_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        password = update.message.text.strip()
        email = context.user_data['login_email']

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        success = await self.link_telegram_to_user(email, password, update.effective_user.id)

        if success:
            user = await self.get_user_by_email(email)
            self.user_sessions[update.effective_user.id] = {
                'authenticated': True,
                'user_id': user['id'],
                'user_name': user['name']
            }

            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END

    async def cancel_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        context.user_data.clear()
        return ConversationHandler.END

    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            categories = await self.get_categories()

            if not categories:
                await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
                return

            text = "üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            keyboard = []

            for category in categories:
                callback_data = f"category_{category['id']}"
                keyboard.append([InlineKeyboardButton(
                    f"{category['name']}",
                    callback_data=callback_data
                )])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ catalog_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data

        if data == "catalog":
            await self.show_catalog(query)
        elif data == "favorites":
            if await self.require_auth(update, context):
                await self.show_favorites(query)
        elif data == "cart":
            if await self.require_auth(update, context):
                await self.show_cart(query)
        elif data == "profile":
            if await self.require_auth(update, context):
                await self.show_profile(query)
        elif data == "about":
            await self.show_about(query)
        elif data == "main_menu":
            await self.show_main_menu(query)
        elif data == "register":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ConversationHandler
            await self.start_registration(update, context)
            return
        elif data == "login":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ConversationHandler
            await self.start_login(update, context)
            return
        elif data == "notifications_settings":
            if await self.require_auth(update, context):
                await self.show_notification_settings(query)
        elif data == "notifications_on":
            if await self.require_auth(update, context):
                await self.toggle_notifications(query, True)
                await self.show_notification_settings(query)
        elif data == "notifications_off":
            if await self.require_auth(update, context):
                await self.toggle_notifications(query, False)
                await self.show_notification_settings(query)
        elif data.startswith("category_"):
            category_id = int(data.split("_")[1])
            await self.show_category_products(query, category_id)
        elif data.startswith("product_"):
            product_id = int(data.split("_")[1])
            await self.show_product_details(query, product_id)
        elif data.startswith("add_to_cart_"):
            if await self.require_auth(update, context):
                product_id = int(data.split("_")[3])
                await self.add_to_cart(query, product_id)

    async def safe_edit_message(self, query, text: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            try:
                await query.message.reply_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

    async def show_catalog(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            categories = await self.get_categories()

            text = "üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            keyboard = []

            for category in categories:
                callback_data = f"category_{category['id']}"
                keyboard.append([InlineKeyboardButton(
                    f"{category['name']}",
                    callback_data=callback_data
                )])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await self.safe_edit_message(query, text, reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_catalog: {e}")
            await self.safe_edit_message(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")

    async def show_category_products(self, query, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            products = await self.get_products_by_category(category_id)

            if not products:
                text = "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]]
            else:
                text = f"üì¶ *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n"
                keyboard = []

                for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–æ–≤–∞—Ä–æ–≤
                    text += f"‚Ä¢ *{product['name']}*\n"
                    text += f"  üí∞ {product['price']} ‚ÇΩ\n"
                    text += f"  üë§ {product['seller_name']}\n\n"

                    keyboard.append([InlineKeyboardButton(
                        f"üëÄ {product['name'][:30]}...",
                        callback_data=f"product_{product['id']}"
                    )])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await self.safe_edit_message(query, text, reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_category_products: {e}")
            await self.safe_edit_message(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.")

    async def show_product_details(self, query, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        try:
            product = await self.get_product_by_id(product_id)

            if not product:
                await self.safe_edit_message(query, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            text = f"üé® *{product['name']}*\n\n"
            text += f"üìù {product['description']}\n\n"
            text += f"üí∞ *–¶–µ–Ω–∞:* {product['price']} ‚ÇΩ\n"
            text += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {product['category_name']}\n"
            text += f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {product['seller_name']}\n"

            if product['seller_phone']:
                text += f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {product['seller_phone']}\n"

            text += f"üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–æ:* {product['created_at'].strftime('%d.%m.%Y')}\n"

            keyboard = []

            # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            telegram_id = query.from_user.id
            if self.is_user_authenticated(telegram_id):
                keyboard.extend([
                    [InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
                    [InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_to_favorites_{product_id}")]
                ])
            else:
                keyboard.append([InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", callback_data="login")])

            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{product['category_id']}")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if product['image_url']:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                    await query.message.reply_photo(
                        photo=product['image_url'],
                        caption=text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.delete_message()
                except Exception as img_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.safe_edit_message(
                        query,
                        text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        reply_markup=reply_markup
                    )
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.safe_edit_message(query, text, reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_product_details: {e}")
            await self.safe_edit_message(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞.")

    async def show_profile(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = query.from_user.id
        user = await self.get_user_by_telegram_id(telegram_id)

        if user:
            text = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
            text += f"*–ò–º—è:* {user['name']}\n"
            text += f"*Email:* {user['email']}\n"
            text += f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user['created_at'].strftime('%d.%m.%Y')}\n"
        else:
            text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications_settings")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="logout")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)

    async def show_favorites(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
        text = "‚ù§Ô∏è *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)

    async def show_cart(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–∑–∞–≥–ª—É—à–∫–∞)"""
        text = "üõí *–ö–æ—Ä–∑–∏–Ω–∞*\n\n–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)

    async def show_about(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        text = """
    ‚ÑπÔ∏è *–û –ø—Ä–æ–µ–∫—Ç–µ Rukami*

    Rukami - –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

    *–ù–∞—à–∞ –º–∏—Å—Å–∏—è:* 
    –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏—Ö —Ç–≤–æ—Ä–µ–Ω–∏–π.

    *–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:*
    ‚Ä¢ –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä handmade —Ç–æ–≤–∞—Ä–æ–≤
    ‚Ä¢ –ü—Ä—è–º—É—é —Å–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
    ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    ‚Ä¢ –£–¥–æ–±–Ω—É—é –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ Telegram

    *–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* 1.0.0
    *–°–∞–π—Ç:* rukami.ru (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        """

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)

    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        telegram_id = user.id

        text = f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rukami, {user.first_name}!\n\n"
        text += "Rukami - —ç—Ç–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")]
        ]

        if self.is_user_authenticated(telegram_id):
            keyboard.extend([
                [InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
        else:
            keyboard.extend([
                [InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login")],
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
            ])

        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)
    async def add_to_cart(self, query, product_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (–∑–∞–≥–ª—É—à–∫–∞)"""
        await query.answer("üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    async def logout(self, query):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        telegram_id = query.from_user.id
        if telegram_id in self.user_sessions:
            del self.user_sessions[telegram_id]

        await query.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        await self.show_main_menu(query)

    async def get_all_telegram_users(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)"""
        async with self.db_pool.acquire() as conn:
            return await conn.fetch("""
                SELECT telegram_id, name FROM users 
                WHERE telegram_id IS NOT NULL 
                AND (notifications_enabled IS NULL OR notifications_enabled = true)
            """)

    async def get_new_products_since(self, timestamp) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        async with self.db_pool.acquire() as conn:
            query = """
                SELECT p.*, c.name as category_name, u.name as seller_name 
                FROM products p 
                JOIN categories c ON p.category_id = c.id 
                JOIN users u ON p.user_id = u.id 
                WHERE p.created_at > $1 AND p.in_stock = true 
                ORDER BY p.created_at DESC
            """
            return await conn.fetch(query, timestamp)

    async def send_new_product_notification(self, product: dict, telegram_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            text = f"üÜï *–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ Rukami!*\n\n"
            text += f"üé® *{product['name']}*\n\n"
            text += f"üìù {product['description']}\n\n"
            text += f"üí∞ *–¶–µ–Ω–∞:* {product['price']} ‚ÇΩ\n"
            text += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {product['category_name']}\n"
            text += f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {product['seller_name']}\n"

            keyboard = [
                [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"product_{product['id']}")],
                [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            if product['image_url']:
                try:
                    await self.application.bot.send_photo(
                        chat_id=telegram_id,
                        photo=product['image_url'],
                        caption=text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                except Exception as img_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {img_error}")
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.application.bot.send_message(
                        chat_id=telegram_id,
                        text=text + "\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

    async def broadcast_new_products(self, products: list):
        """–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not products:
            return

        users = await self.get_all_telegram_users()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ {len(products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        for product in products:
            for user in users:
                try:
                    await self.send_new_product_notification(product, user['telegram_id'])
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

    async def check_new_products(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            current_time = datetime.now()

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å –Ω–∞–∑–∞–¥
            if self.last_product_check is None:
                self.last_product_check = current_time.replace(hour=current_time.hour - 1)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            new_products = await self.get_new_products_since(self.last_product_check)

            if new_products:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                await self.broadcast_new_products(new_products)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_product_check = current_time

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    async def start_product_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""

        async def monitoring_loop():
            while True:
                try:
                    await self.check_new_products()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    await asyncio.sleep(60)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    await asyncio.sleep(60)

        self.notification_task = asyncio.create_task(monitoring_loop())
        logger.info("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    async def stop_product_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        if self.notification_task:
            self.notification_task.cancel()
            try:
                await self.notification_task
            except asyncio.CancelledError:
                pass
            logger.info("üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def toggle_notifications(self, query, enable: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = query.from_user.id

        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ notifications_enabled –≤ —Ç–∞–±–ª–∏—Ü—É users
        async with self.db_pool.acquire() as conn:
            await conn.execute("""
                UPDATE users 
                SET notifications_enabled = $1 
                WHERE telegram_id = $2
            """, enable, telegram_id)

        status = "–≤–∫–ª—é—á–µ–Ω—ã" if enable else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

    async def show_notification_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        telegram_id = query.from_user.id

        async with self.db_pool.acquire() as conn:
            user = await conn.fetchrow(
                "SELECT notifications_enabled FROM users WHERE telegram_id = $1",
                telegram_id
            )

        notifications_enabled = user['notifications_enabled'] if user else True

        text = "üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        text += f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."

        keyboard = []
        if notifications_enabled:
            keyboard.append([InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_off")])
        else:
            keyboard.append([InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_on")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.safe_edit_message(query, text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ Rukami:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤  
/help - –°–ø—Ä–∞–≤–∫–∞

*–ù–∞–≤–∏–≥–∞—Ü–∏—è:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """

        await update.message.reply_text(help_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.application = Application.builder().token(self.bot_token).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_registration, pattern="^register$")],
            states={
                REGISTRATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_name)],
                REGISTRATION_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_email)],
                REGISTRATION_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_phone)],
                REGISTRATION_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.registration_password)],
            },
            fallbacks=[MessageHandler(filters.COMMAND, self.cancel_auth)]
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        login_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_login, pattern="^login$")],
            states={
                LOGIN_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.login_email)],
                LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.login_password)],
            },
            fallbacks=[MessageHandler(filters.COMMAND, self.cancel_auth)]
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CommandHandler("help", self.help_command))

        # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler'—ã
        self.application.add_handler(registration_handler)
        self.application.add_handler(login_handler)

        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ Rukami...")

        async def startup():
            await self.init_db()
            await self.start_product_monitoring()

        async def shutdown():
            await self.stop_product_monitoring()
            await self.close_db()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        asyncio.get_event_loop().run_until_complete(startup())

        try:
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            asyncio.get_event_loop().run_until_complete(shutdown())


if __name__ == '__main__':
    bot = RukamiBot()
    bot.run()